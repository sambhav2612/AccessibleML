# Welcome to Graphcool!
#
# This file is the main config file for your Graphcool Service.
# It's very minimal at this point and uses default values.
# We've included a hello world function here.
# Just run `graphcool deploy` to have the first running Graphcool Service.
#
# Check out some examples:
#    https://github.com/graphcool/framework/tree/master/examples
#
# Here are the reference docs of this definition format:
# https://www.graph.cool/docs/reference/service-definition/graphcool.yml-foatho8aip
#
# Happy Coding!


# In the types.graphql you define your data schema
types: ./types.graphql


functions:

# added by pusher template: (please uncomment)
# 
#   pushNotification:
#     handler:
#       code:
#         src: ./src/pusher/pushNotification.ts
#         environment:
#           PUSHER_APP_ID: ${env:PUSHER_APP_ID}
#           PUSHER_KEY: ${env:PUSHER_KEY}
#           PUSHER_SECRET: ${env:PUSHER_SECRET}
#           PUSHER_CLUSTER: ${env:PUSHER_CLUSTER}
#     type: resolver
#     schema: ./src/pusher/pushNotification.graphql


# added by facebook template: (please uncomment)
# 
#   facebookAuthentication:
#     handler:
#       code:
#         src: ./src/facebook/facebookAuthentication.ts
#     type: resolver
#     schema: ./src/facebook/facebookAuthentication.graphql
#   loggedInUser:
#     handler:
#       code:
#         src: ./src/facebook/loggedInUser.ts
#     type: resolver
#     schema: ./src/facebook/loggedInUser.graphql


# added by google template: (please uncomment)
# 
#   googleAuthentication:
#     handler:
#       code:
#         src: ./src/google/googleAuthentication.ts
#     type: resolver
#     schema: ./src/google/googleAuthentication.graphql
#   loggedInUser:
#     handler:
#       code:
#         src: ./src/google/loggedInUser.ts
#     type: resolver
#     schema: ./src/google/loggedInUser.graphql


# added by email-password template: (please uncomment)
# 
#   signup:
#     type: resolver
#     schema: src/email-password/signup.graphql
#     handler:
#       code: src/email-password/signup.ts
# 
#   authenticate:
#     type: resolver
#     schema: src/email-password/authenticate.graphql
#     handler:
#       code: src/email-password/authenticate.ts
# 
#   loggedInUser:
#     type: resolver
#     schema: src/email-password/loggedInUser.graphql
#     handler:
#       code: src/email-password/loggedInUser.ts

  hello:
    handler:
      code: src/hello.js
    type: resolver
    schema: src/hello.graphql


# Model/Relation permissions are used to limit the API access
# To take the burden of thinking about those while development, we
# preconfigured the wildcard ("*") permission that allows everything
# Read more here:
# https://www.graph.cool/docs/reference/auth/authorization/overview-iegoo0heez
permissions:
  - operation: "*"


# Your root tokens used for functions to get full access to the API
# Read more here:
# https://www.graph.cool/docs/reference/auth/authentication/authentication-tokens-eip7ahqu5o
# rootTokens:
#   - mytoken

